version: '3'

tasks:
  install-tools:
    desc: Install all the tools needed for the project (need task for)
    cmds:
      - ./install-tools.sh

  # Internal validator for env vars / projects args
  _validate:
    internal: true
    silent: true
    cmds:
      - |
        if [ -z "{{.PROJ}}" ]; then
          echo "❌ Error: PROJ variable is required"
          echo "Usage: task <task-name> PROJ=<project-name>"
          exit 1
        fi
      - |
        # Check if PROJ_DIR is set (from command line or parent task)
        if [ -n "{{.PROJ_DIR}}" ]; then
          # Use the provided PROJ_DIR
          if [ ! -d "{{.PROJ_DIR}}" ]; then
            echo "❌ Error: Directory {{.PROJ_DIR}} does not exist"
            echo "Make sure the project's directory exists or override with PROJ_DIR=<path>"
            exit 1
          fi
        else
          # Use the default value
          if [ ! -d "assignments/{{.PROJ}}" ]; then
            echo "❌ Error: Directory assignments/{{.PROJ}} does not exist"
            echo "Make sure the project's directory exists or override with PROJ_DIR=<path>"
            exit 1
          fi
        fi

  # Assignment 1 - Local Execution (Without Docker)
  execute-proj:
    desc: Run the project locally with uv (`task execute-proj PROJ=<project-name>`)
    deps: [_validate]
    silent: true
    vars:
      PROJ_DIR: 'assignments/{{.PROJ}}'
      PORT: '{{.PORT | default 8501}}'
    dir: '{{.PROJ_DIR}}' 
    cmds:
      - uv sync --package {{.PROJ}}
      - uv pip install -e .
      - |
        if [ "{{.PROJ}}" = "movie-sentiment-fastapi" ]; then
          uv run uvicorn src.main:app --port {{.PORT}}
        else
          uv run python src/main.py --server.port {{.PORT}}
        fi

  # Assignment 2 - Docker Execution
  execute-proj-docker:
    desc: Build and run the project in Docker (`task execute-proj-docker PROJ=<project-name>`)
    deps: [_validate]
    silent: true
    vars:
      PROJ_DIR: 'assignments/{{.PROJ}}'
      IMG: '{{.PROJ}}'
      PORT: '{{.PORT | default 8501}}'
    dir: '{{.PROJ_DIR}}'
    cmds:
      - docker build --build-arg PORT={{.PORT}} -t {{.IMG}} .
      - docker run --rm -p {{.PORT}}:{{.PORT}} {{.IMG}}
      - defer: {task: clean}

  build:
    desc: Build the Docker container (`task build PROJ=<project-name>`)
    deps: [_validate]
    silent: true
    vars:
      PROJ_DIR: 'assignments/{{.PROJ}}'
      # IMG variable is redundant but it makes it clear that the Docker image name == project name
      IMG: '{{.PROJ}}'
      PORT: '{{.PORT | default 8501}}'
    # Can override PROJ_DIR in CLI 
    # i.e task execute-proj PROJ=<project-name> PROJ_DIR=<project-directory>  
  
    dir: '{{.PROJ_DIR}}'
    cmds:
      - docker build --build-arg PORT={{.PORT}} -t {{.IMG}} .

  run:
    desc: Run the Docker container (`task run PROJ=<project-name>`)
    deps: [_validate]
    silent: true
    vars:
      PROJ_DIR: 'assignments/{{.PROJ}}'
      IMG: '{{.PROJ}}'
      PORT: '{{.PORT | default 8501}}'
    dir: '{{.PROJ_DIR}}'
    cmds:
      - docker run --rm -p {{.PORT}}:{{.PORT}} {{.IMG}}
      - defer: {task: clean}

  clean:
    desc: Remove Docker image (`task clean PROJ=<project-name>`)
    deps: [_validate]
    silent: true
    vars:
      PROJ_DIR: 'assignments/{{.PROJ}}'
      IMG: '{{.PROJ}}'
    cmds:
      - docker rmi {{.IMG}} || true

  clean-artifacts:
    desc: Delete .log, .pkl, and .csv from /assets (`task clean-artifacts PROJ=<project-name>`)
    deps: [_validate]
    silent: true
    vars:
      PROJ_DIR: 'assignments/{{.PROJ}}'
    cmds:
      - rm -rf {{.PROJ_DIR}}/assets/logs/*.log
      - rm -rf {{.PROJ_DIR}}/assets/models/*.pkl
      - rm -rf {{.PROJ_DIR}}/assets/data/*.csv
      - echo "Artifacts cleaned successfully!"

  aws-dev:up:
    desc: Builds and starts all services.. ML training, FASTAPI backend, Streamlit frontend
    dir: assignments/movie-sentiment-aws
    cmds:
      - docker-compose up --build

  aws-dev:down:
    desc: Stops and removes all services and volumes
    dir: assignments/movie-sentiment-aws
    cmds:
      - docker-compose down -v

  aws-dev:logs:
    desc: Follows the logs of the running services
    dir: assignments/movie-sentiment-aws
    cmds:
      - docker-compose logs -f
  
  aws-dev:eval:
    desc: Runs the evaluator script
    dir: assignments/movie-sentiment-aws
    cmds:
      - uv run assets/scripts/evaluator.py

  aws-prod:init:
    desc: Initialize Terraform
    dir: assignments/movie-sentiment-aws/terraform
    cmds:
      - terraform init

  aws-prod:s3:
    desc: Create the S3 bucket for storing artifacts
    dir: assignments/movie-sentiment-aws/terraform
    vars:
      S3_BUCKET: '{{.S3_BUCKET | default "movie-sentiment-s3"}}'
      AWS_REGION: '{{.AWS_REGION | default "us-east-1"}}'
    cmds:
      - |
        set -a
        source ../.env
        set +a
        aws s3api create-bucket --bucket {{.S3_BUCKET}} --region {{.AWS_REGION}}

  aws-prod:apply:
    desc: Run terraform apply to deploy the application
    dir: assignments/movie-sentiment-aws/terraform
    vars:
      S3_BUCKET: '{{.S3_BUCKET | default "movie-sentiment-s3"}}'
      AWS_REGION: '{{.AWS_REGION | default "us-east-1"}}'
    cmds:
      - |
        set -a
        source ../.env
        set +a
        terraform apply --auto-approve -var="s3_bucket={{.S3_BUCKET}}" -var="aws_region={{.AWS_REGION}}"

  aws-prod:destroy:
    desc: Run terraform destroy to tear down the infrastructure
    dir: assignments/movie-sentiment-aws/terraform
    cmds:
      - |
        set -a
        source ../.env
        set +a
        aws logs delete-log-group --log-group-name /aws/ec2/movie-sentiment-app --region us-east-1
        terraform destroy --auto-approve

  aws-prod:reset:
    desc: Reset the infrastructure/state/local state and start from scratch
    dir: assignments/movie-sentiment-aws/terraform
    cmds:
      - |
        rm -rf .terraform/ *.tfstate* .terraform.*
        terraform init